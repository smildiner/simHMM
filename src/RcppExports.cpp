// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cat_mult_fw_cpp
List cat_mult_fw_cpp(NumericMatrix allprobs, NumericMatrix gamma, int m, int n, NumericVector delta);
RcppExport SEXP _simHMM_cat_mult_fw_cpp(SEXP allprobsSEXP, SEXP gammaSEXP, SEXP mSEXP, SEXP nSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type allprobs(allprobsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(cat_mult_fw_cpp(allprobs, gamma, m, n, delta));
    return rcpp_result_gen;
END_RCPP
}
// llmnl_int
double llmnl_int(NumericVector beta, IntegerVector Obs, int n_cat);
RcppExport SEXP _simHMM_llmnl_int(SEXP betaSEXP, SEXP ObsSEXP, SEXP n_catSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Obs(ObsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cat(n_catSEXP);
    rcpp_result_gen = Rcpp::wrap(llmnl_int(beta, Obs, n_cat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simHMM_cat_mult_fw_cpp", (DL_FUNC) &_simHMM_cat_mult_fw_cpp, 5},
    {"_simHMM_llmnl_int", (DL_FUNC) &_simHMM_llmnl_int, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_simHMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
